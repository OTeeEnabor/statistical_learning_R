pairs(College[, 1:10])
boxplot(College[, i] ~ College[, 1], xlab="", main=colnames(College)[i])
for (i in 2:17)
par(mfrow=c(4,4), mar=c(2,2,1,0))
for (i in 2:17)
boxplot(College[, i] ~ College[, 1], xlab="", main=colnames(College)[i])
Auto<- read.table("data/Auto.data")
Auto <- read.table("data/Auto.data")
Auto <- read.table("data/Auto.data","rt")
Auto <- read.table("data/Auto.data","rt")
Auto <- read.table("Auto.data")
Auto <- read.table("Auto.data")
read.table("Auto.data")
read.table("Auto.data")
read.table("Auto.csv")
read.table("../Auto.csv")
# display the current working directory
getwd()
#read.table("../Auto.csv")
# display the current working directory
getwd()
# read
read.table("../data/Auto.csv")
# display the current working directory
getwd()
# read
read.table("../data/Auto.data")
Auto <- read.table("../data/Auto.data", header=TRUE, na.strings="?", stringsAsFactors = TRUE)
Auto <- read.table("../data/Auto.data", header=TRUE, na.strings="?", stringsAsFactors = TRUE)
# view the Auto data frame
View(Auto)
Auto <- read.table("../data/Auto.data", header=TRUE, na.strings="?", stringsAsFactors = TRUE)
# view the Auto data frame
View(Auto)
# check the dimensions of the dataset - number of observations and variables
dim(Auto)
Head(Auto)
# remove the missing values in Auto using the na.omit method
Auto <- na.omit(Auto)
dim(Auto)
names(Auto)
summary(Auto)
# plot a scatterplot to show the relationship between cyclinders and mpg
plot(Auto$cylinders, Auto$mpg)
# attach Auto to make the variables accessible by name
#attach(AUto)
#plot(cylinders,mpg)
# attach Auto
attah(Auto)
# attach Auto
attach(Auto)
# change cylinders to a qualitative variable
cylinders <- as.factor(cylinders)
# plot relationship between cylinders and mpg
plot(cylinders, mpg)
```{r}
# attach Auto
attach(Auto)
# change cylinders to a qualitative variable
cylinders <- as.factor(cylinders)
# plot relationship between cylinders and mpg
plot(cylinders, mpg)
# attach Auto
attach(Auto)
# change cylinders to a qualitative variable
cylinders <- as.factor(cylinders)
# plot relationship between cylinders and mpg
plot(cylinders, mpg
col="red", varwidth="T",
# attach Auto
attach(Auto)
# change cylinders to a qualitative variable
cylinders <- as.factor(cylinders)
# plot relationship between cylinders and mpg
plot(cylinders, mpg,
col="red", varwidth="T",
xlab="cylinders", ylab="MPG")
# attach Auto
attach(Auto)
# change cylinders to a qualitative variable
cylinders <- as.factor(cylinders)
# plot relationship between cylinders and mpg
plot(cylinders, mpg,
col="red", varwidth=TRUE,
xlab="cylinders", ylab="MPG")
hist(mpg, col=2, breaks=15)
pairs(Auto)
pairs(
~mpg + displacement + horsepower + weight + acceleration,
data=Auto
)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
identify(horsepower, mpg, name)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
identify(horsepower, mpg, name)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
library(ISLR)
College <- read.csv("../data/College.csv")
Vew(College)
View(College)
# read in the College data set
College <- read.csv("../data/College.csv")
# give each row name corresponding to the appropriate college name
rownames(college) <- college[,1]
# read in the College data set
College <- read.csv("../data/College.csv")
# give each row name corresponding to the appropriate college name
rownames(College) <- College[,1]
# remove the name college
college <- College[,-1]
# use summary function to produce numerical
# summary of the variables in the data set
summary(college)
# create a scatter plot matrix with the first 10 predictors in college datasec
pairs(college[, 1:10])
# create a scatter plot matrix with the first 10 predictors in college datasec
pairs(College[, 1:10])
# read in the College data set
College <- read.csv("../data/College.csv")
# give each row name corresponding to the appropriate college name
rownames(College) <- College[,1]
# remove the name college
college <- College[,-1]
# use summary function to produce numerical summary of the variables in the data set
summary(college)
# create a scatter plot matrix with the first 10 predictors in college datasec
pairs(College[, 1:10])
# create a scatter plot matrix with the first 10 predictors in college datasec
pairs(College[, 2:10])
sapply(College[,1:10], is.numeric)
View(College)
View(college)
# read in the College data set
College <- read.csv("../data/College.csv")
# give each row name corresponding to the appropriate college name
rownames(College) <- College[,1]
# remove the name college
college <- College[,-1]
# use summary function to produce numerical summary of the variables in the data set
summary(college)
# read in the College data set
College <- read.csv("../data/College.csv")
# read in the College data set
college <- read.csv("../data/College.csv")
# give each row name corresponding to the appropriate college name
rownames(college) <- college[,1]
# remove the name college
college <- college[,-1]
# use summary function to produce numerical summary of the variables in the data set
summary(college)
# give each row name corresponding to the appropriate college name
rownames(college) <- college[,1]
# read in the College data set
college <- read.csv("../data/College.csv")
# give each row name corresponding to the appropriate college name
rownames(college) <- college[,1]
View(college)
# read in the College data set
college <- read.csv("../data/College.csv")
# give each row name corresponding to the appropriate college name
rownames(college) <- college[,1]
# remove the first column where college names stored
college <- college[,-1]
View(college)
# use summary function to produce numerical summary of the variables in the data set
summary(college)
# create a scatter plot matrix with the first 10 predictors in college datasec
pairs(college[, 2:10])
par(mfrow=c(4,4), mar=c(2,2,1,0))
for (i in 2:17)
boxplot(college[, i] ~ college[, 1], xlab="", main=colnames(college)[i])
# create multiple plots - 4 rows and 4 columns with margin - top right bottom left
par(mfrow=c(4,4), mar=c(2,2,1,0))
for (i in 2:17)
plot.boxplot(college[, i] ~ college[, 1], xlab="", main=colnames(college)[i])
# create multiple plots - 4 rows and 4 columns with margin - top right bottom left
par(mfrow=c(4,4), mar=c(2,2,1,0))
for (i in 2:17)
plot(college[, i] ~ college[, 1], xlab="", main=colnames(college)[i])
# create multiple plots - 4 rows and 4 columns with margin - top right bottom left
par(mfrow=c(4,4), mar=c(2,2,1,0))
for (i in 2:17)
boxplot(college[, i] ~ college[, 1], xlab="", main=colnames(college)[i])
# add Elite to College as a categorical variable
college <- data.frame(college, Elite)
# create replicated vector of No with length of college
Elite <- rep("No", nrow(college))
# change elite value to yes if Top10Perc above 50
Elite[college$Top10perc > 50] > "Yes"
# change Elite to a set of distinct qualitative values - factor
Elite <- as.factor(Elite)
# add Elite to College as a categorical variable
college <- data.frame(college, Elite)
View(College)
View(college)
# create replicated vector of No with length of college
Elite <- rep("No", nrow(college))
# change elite value to yes if Top10Perc above 50
Elite[college$Top10perc > 50] > "Yes"
# change Elite to a set of distinct qualitative values - factor
Elite <- as.factor(Elite)
# add Elite to College as a categorical variable
college <- data.frame(college, Elite)
summary(college$Elite)
# create replicated vector of No with length of college
Elite <- rep("No", nrow(college))
# change elite value to yes if Top10Perc above 50
Elite[college$Top10perc > 50] <- "Yes"
# change Elite to a set of distinct qualitative values - factor
Elite <- as.factor(Elite)
# add Elite to College as a categorical variable
college <- data.frame(college, Elite)
summary(college$Elite)
# read in the College data set
college <- read.csv("../data/College.csv")
# give each row name corresponding to the appropriate college name
rownames(college) <- college[,1]
# remove the first column where college names stored
college <- college[,-1]
# use summary function to produce numerical summary of the variables in the data set
summary(college)
# create a scatter plot matrix with the first 10 predictors in college datasec
pairs(college[, 2:10])
# create multiple plots - 4 rows and 4 columns with margin - top right bottom left
par(mfrow=c(4,4), mar=c(2,2,1,0))
for (i in 2:17)
boxplot(college[, i] ~ college[, 1], xlab="", main=colnames(college)[i])
# create replicated vector of No with length of college
Elite <- rep("No", nrow(college))
# change elite value to yes if Top10Perc above 50
Elite[college$Top10perc > 50] <- "Yes"
# change Elite to a set of distinct qualitative values - factor
Elite <- as.factor(Elite)
# add Elite to College as a categorical variable
college <- data.frame(college, Elite)
summary(college$Elite)
# create multiple plots - 4 rows and 4 columns with margin - top right bottom left
par(mfrow=c(4,4), mar=c(2,2,1,0))
plot(college$Outstate, college$Elite)
# create multiple plots - 4 rows and 4 columns with margin - top right bottom left
plot(college$Outstate ~ college$Elite)
# create multiple plots - 4 rows and 4 columns with margin - top right bottom left
plot(college$Outstate, college$Elite)
# create multiple plots - 4 rows and 4 columns with margin - top right bottom left
plot(college$Outstate~ college$Elite)
par(mfrow=c(2,2))
hist(college$Apps, breaks = 5)
par(mfrow=c(2,2))
hist(college$Apps, breaks = 5)
hist(college$Apps, breaks = 10)
hist(college$Apps, breaks = 20)
hist(college$Apps, breaks = 40)
par(mfrow=c(2,2))
hist(college$PhD, breaks = 5)
hist(college$PhD, breaks = 10)
hist(college$PhD, breaks = 20)
hist(college$PhD, breaks = 40)
head(Boston)
library(MASS)
library(ISLR2)
head(Boston)
# attach the Boston dataset to global environment
attach(Boston)
lm.fit <- lm(medv ~ lstat)
# attach the Boston dataset to global environment
attach(Boston)
# fit the linear model
lm.fit <- lm(medv ~ lstat)
# print summary of fit
summary(lm.fit)
confint(lm.fit)
# calculate confidence interval of prediction
predict(lm.fit, data.frame(lstat=(c(5,10,15))), interval="confidence")
# calculate confidence interval of prediction
predict(lm.fit, data.frame(lstat=(c(5,10,15))), interval="prediction")
# Plot the relationship between the two variables as well as least squares regression line.
plot(lstat, medv)
abline(lm.fit)
# read in the Advertising data set
advertising <- read.csv("../data/Advertising.csv")
summary(advertising)
head(advertising)
# plot sales vs tv
plot(sales, tv)
# read in the Advertising data set
advertising <- read.csv("../data/Advertising.csv")
head(advertising)
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(sales, TV)
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(sales, TV)
absline(sales,tv)
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(sales, TV)
abline(sales,tv)
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(sales, TV)
abline(sales,TV)
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales)
abline(sales,TV)
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales)
abline(lm(sales ~TV))
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales, colors="red")
abline(lm(sales ~TV))
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales, col="red")
abline(lm(sales ~TV))
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales, col="red")
abline(lm(sales ~TV), col="blue")
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales, col="red", filled.contour())
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales, col="red", pch=sales )
abline(lm(sales ~TV), col="blue")
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales, col="red"")
abline(lm(sales ~TV), col="blue")
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales, col="red"")
abline(lm(sales ~TV), col="blue")
# attach Advertising to GlobalEnv
attach(advertising)
# plot sales vs tv
plot(TV,sales, col="red")
abline(lm(sales ~TV), col="blue")
# attach Advertising to GlobalEnv
attach(advertising)
# fit a linear model
model <- lm(sales ~TV)
# create scatter plot sales vs tv
plot(TV,sales, col="red", pch=10)
# add regression line
abline(model, col="blue", lwd=2)
# calculate residuals
residuals <- resid(model)
# plot residuals vs fitted values
plot(fitted(model), residuals)
# attach Advertising to GlobalEnv
attach(advertising)
# fit a linear model
model <- lm(sales ~TV)
# create scatter plot sales vs tv
plot(TV,sales, col="red", pch=10)
# add regression line
abline(model, col="blue", lwd=2)
# add residuals as segments
for (i in 1:nrows(advertising)){
segments(TV[i], sales[i], TV[i], fitted(model)[i])
}
# attach Advertising to GlobalEnv
attach(advertising)
# fit a linear model
model <- lm(sales ~TV)
# create scatter plot sales vs tv
plot(TV,sales, col="red", pch=10)
# add regression line
abline(model, col="blue", lwd=2)
# add residuals as segments
for (i in 1:nrow(advertising)){
segments(TV[i], sales[i], TV[i], fitted(model)[i])
}
# attach Advertising to GlobalEnv
attach(advertising)
# fit a linear model
model <- lm(sales ~TV)
# create scatter plot sales vs tv
plot(TV,sales, col="red", pch=10)
# add regression line
abline(model, col="blue", lwd=2)
# add residuals as segments
for (i in 1:nrow(advertising)){
segments(TV[i], sales[i], TV[i], fitted(model)[i], col="gray")
}
# attach Advertising to GlobalEnv
attach(advertising)
# fit a linear model
model <- lm(sales ~TV)
# create scatter plot sales vs tv
plot(TV,sales, col="red", pch=200)
# add regression line
abline(model, col="blue", lwd=2)
# add residuals as segments
for (i in 1:nrow(advertising)){
segments(TV[i], sales[i], TV[i], fitted(model)[i], col="gray")
}
# attach Advertising to GlobalEnv
attach(advertising)
# fit a linear model
model <- lm(sales ~TV)
# create scatter plot sales vs tv
plot(TV,sales, col="red", pch=20)
# add regression line
abline(model, col="blue", lwd=2)
# add residuals as segments
for (i in 1:nrow(advertising)){
segments(TV[i], sales[i], TV[i], fitted(model)[i], col="gray")
}
# attach Advertising to GlobalEnv
attach(advertising)
# fit a linear model
model <- lm(sales ~TV)
# create scatter plot sales vs tv
plot(TV,sales, col="red", pch=20)
# add regression line
abline(model, col="blue", lwd=2)
# add residuals as segments
for (i in 1:nrow(advertising)){
segments(TV[i], sales[i], TV[i], fitted(model)[i], col="gray", lty=2)
}
# attach Advertising to GlobalEnv
attach(advertising)
# fit a linear model
model <- lm(sales ~TV)
# create scatter plot sales vs tv
plot(TV,sales, col="red", pch=20)
# add regression line
abline(model, col="blue", lwd=2)
# add residuals as segments
for (i in 1:nrow(advertising)){
segments(TV[i], sales[i], TV[i], fitted(model)[i], col="gray", lty=2)
}
coefficients(model)
# create a grid of values for beta_0 and beta_1
beta_0_seq <- seq(0.0, 0.1,10)
# create a grid of values for beta_0 and beta_1
beta_0_seq <- seq(0.0, 0.1,10)
beta_1_seq <- seq(5,10,10)
# create a grid of values for beta_0 and beta_1
beta_0_seq <- seq(0.0, 0.1,length.out=10)
beta_1_seq <- seq(5,10,length.out=10)
# create a grid of values for beta_0 and beta_1
beta_0_seq <- seq(0.0, 0.1,length.out=10)
beta_1_seq <- seq(5,10,length.out=10)
# create grid
coeff_grid <- expand.grid(x1=beta_0_seq, x2=beta_1_seq)
# create a grid of values for beta_0 and beta_1
beta_0_seq <- seq(0.0, 0.1,length.out=10)
beta_1_seq <- seq(5,10,length.out=10)
# create grid
coeff_grid <- expand.grid(x1=beta_0_seq, x2=beta_1_seq)
#
contour(coeff_grid)
library(ISLR)
head(Boston)
library(ISLR2)
head(Boston)
head(Credit)
head(Default)
plot(Default$balance, Default$income)
plot(Default$balance, Default$income, col=Default$default)
# convert default class to factor
default <- Default
plot(Default$balance, Default$income, col=Default$default)
# convert default class to factor
default <- Default
default$default <- factor(default$default)
# define colours for each class
colours <- c("blue", "red")
plot(Default$balance, Default$income, col=colours[default$default])
# convert default class to factor
default <- Default
default$default <- factor(default$default)
# define colours for each class
colours <- c("blue", "red")
plot(Default$balance, Default$income, col=colours[default$default],
title="Relationship Between Income and Credit Balance",
xlab="Balance",
ylab="Income")
# convert default class to factor
default <- Default
default$default <- factor(default$default)
# define colours for each class
colours <- c("blue", "red")
plot(Default$balance, Default$income, col=colours[default$default],
main="Relationship Between Income and Credit Balance",
xlab="Balance",
ylab="Income")
